Blog Archives - Page 10 of 11 - CloudTern Solutions
Blog
August 2, 2019
by
Ramu Kambalapuram
Blog
Digital BSS Overview
An Overview of Digital Business Support Systems (BSS)
Faster time to market is the main objective of digital transformation strategies of most organisations in recent times. With the digital innovation bringing agility and scalability into business processes, organisations are now able to quickly develop and deploy products. The communications industry is not excluded. While other industries are being able to quickly realign their business strategies to digitalize their offerings, the telecom industry faces several challenges on the roadmap to digital transformation. Legacy infrastructure, consolidation of back-end solutions that run on monolithic architecture and redundant systems, shrinking IT budgets are some of them. As customer demands are dynamically changing, businesses now need a dynamic solution that can digitalize their BSS.
The need for Digital BSS
Business support systems are the heart of any organization. In today’s fast-paced business world, having the best BSS is the key to successfully running any business. However, the rapid changing in technologies and customer behaviours have forced communication service providers (CSPs) to offer highly interactive and scalable BSS systems. With the Internet revolution that has been augmented with mobile and IoT, customer interaction modes have significantly changed. New interactive channels such as mobile apps, web and retail etc. and mode of communication such as emails, chats, social media and self-serving apps etc. are the need of the hour. Today, customers expect a quick, flexible and personalized interactive experience that is consistent and holistic across all channels. However, current BSS are bogged down with large monolithic architectures and traditional systems.
Adding to this challenge is the entrant of over-the-top (OTT) players and social networks such as Apple, Google and Facebook. As they offer video and voice calls, chats and other interactive channels that are easy, intuitive and fast, CSPs face a tough challenge in matching this agility. Secondly, there is a decline in voice revenues as data services are getting popular in recent times. To make up for this loss, CSPs are required to invest in new channels and upgrade existing networks while integrating them with existing BSS networks. The ever-increasing cloud solutions pose another challenge as they should be properly integrated into the existing infrastructure while streamlining the data warehousing infrastructure. A new digital BSS architecture is the answer.
Digital BSS Architecture
A digital BSS solution consolidates backend infrastructure, optimizes interoperability to offer a superior customer experience. At the heart of digital BSS sits the BSS API Framework. A Cassandra database can be used to facilitate faster data processing of thousands of requests per second. Complimented by the High Performance Data (HPD) Framework, the BSS API integrates all channels into a common information layer to deliver a unified communications system that is modular and highly scalable.
The BSS API Framework should support all types of APIs running on different domains. Whether you use a public API for externally processing applications or run a private API for communication between core components, Events API that update users with change in state or a data loading Import API, all APIs can seamlessly interact via the BSS API Framework.
A robust and comprehensive digital BSS should contain subsystems such as Product Order Management, Predictive Analytics, Revenue Management etc. for a comprehensive management of business processes.
Product and Order Management:
It defines customer profiles from technical and commercial perspective enabling you to flexibly offer differential pricing with higher customer satisfaction while eliminating the need to manage multiple catalogues across the organization.
Revenue Management:
For any business, revenue management is the key. A BSS revenue management subsystem offers a centralized billing system that allows you to manage billing, invoicing, collections etc. with business agility and centralized control, you can optimize costs and improve revenues.
Predictive Analytics:
Closely monitoring changing technologies and customer trends, Predictive Analytics analyses business data and offers data-driven decision making systems.
Predictive Analytics:
Closely monitoring changing technologies and customer trends, Predictive Analytics analyses business data and offers data-driven decision making systems.
Similarly, you can add other sub-systems such as Intelligence Channel system that offers predictive customer service, Customer Profiling, Credit Decision Tool, Reporting & Analytics tool, Office management etc. An intuitive dashboard is a key component that allows you to monitor and manage entire BSS operations from a centralized dashboard. When rightly implemented, digital BSS solutions bring a new level of intelligence to your business processes.
The State of Digital BSS Market
According to
MarketsandMarkets
, the global digital market was valued at $2.8 billion in 2018. This value is expected to touch $5.8 billion by 2023, growing at a CAGR of 15.2%. similarly,
Transparency Market Research
reports that the Operations Support System (OSS) and the BSS market which was valued at $29.11 billion in 2015 is expected to touch $70.97 billion by 2024, growing at a CAGR of 10.5% during this period.
The Bottomline
The telecommunications industry is going through a digital transformation. Digital BSS solutions are poised to disrupt this space. Communication service providers that embrace this trend are going to stay ahead of competition. Ignoring this digital transformation will leave you out of business. The key here is to choose the right IT service provider to help you make a smooth transition to the digital BSS era.
Contact
CloudTern right now to embrace the Digital BSS revolution!
Read More
Share
July 8, 2018
by
Ramu Kambalapuram
Blog
Beacon technology for Asset Tracking
The advent of Internet of Things (IoT) has not only revolutionized IT networks but it also paved way for a range of new and innovative technologies. The beacon technology is one among them. Right from the time when Apple introduced the beacon technology in 2013 to till date, the technology has greatly evolved and is getting better every day. While the beacon technology was initially used by retail businesses, its functionality is now being extending to every field. Asset tracking with beacons is the new trend. Using the beacon technology, businesses are now able to implement cost-effective and highly scalable asset tracking solutions.
An Overview of Beacons
A beacon is a small Bluetooth-based device that is used to continuously transmit radio signals. This small form factor device contains a small radio transmitter and a battery. It uses the Bluetooth Low Energy(BLE) protocol to transmit data. As BLE consumes low energy, you can run beacons without draining out the battery. Depending on the size and functionality of the device, beacon batteries can last from 6 months to 5 years. However, it transmits low amounts of data which means you can’t transfer audio or streaming data.
The beacon technology is similar to Near-field Communication (NFC) technology. However, the difference lies in the range. While NFC functions within 8 inches, beacons can work within a range of 70 meters.
The State of Beacon Market
Beacons have become the first choice for many companies when it comes to Real-Time Location System (RTLS) solutions. According to Grandview Research, the global Bluetooth beacon market is expected to reach $58.7 billion by 2025, growing at a CAGR of 95.3% between 2017 and 2025. Similarly, Allied Market Research reports that the global beacon market would reach $14.839 billion by 2024, growing at a CAGR of 61.5% between 2018 and 2024. GM Insights reports that the market value of beacons was $170 million in 2016. This value is expected to grow at a CAGR of 80% between 2017 and 2024. The retail industry is the largest market for beacons followed by the health sector.
Source: https://www.statista.com/statistics/827293/world-beacons-technology-market-revenue-by-end-user/
Analyst firm Statista reports that the global beacon market was valued at $519.6 million in 2016. This value is expected to reach $56.6 billion by 2026, growing at a CAGR of 59.8% between 2016 and 2026.
The Technology behind Beacons
Beacons perform a single task. They just send a radio signal at pre-defined intervals. BLE-enabled devices such as smartphones receive these signals and act accordingly. Each beacon is assigned with a unique identifier. So, the device transmits this unique identifier which enables the receiver to identify the location of the beacon as well as the location of the user.
A beacon contains a small ARM (Advanced RISC machines) computer, Bluetooth connectivity module and a small battery. This small CPU runs the firmware written in low-level programming that controls the behaviour of the beacon. As the beacon’s job is to transmit its identifier, the small CPU power and battery is more than sufficient to process this data or encrypt the identifier. Inside the beacon you will find a small antenna that transmits electromagnetic waves. It uses the Bluetooth protocol. The latest Bluetooth standard is 4.2. The normal frequency of the beacon radio waves is 2.4 GHz and the maximum data limit for the 4.2 standard is 257 bytes. With such small amount of payload, beacons transmit the UUID, major, minor and the signal power. The receiving devices calculate the proximity of the beacon based on the transmitted signal power.
Beacon transmits the following components
Universally Unique Identifier (UUID): It is the unique identifier that differentiates your beacons from other devices outside your network.
Major Value: It is the unsigned integer value that tells you about the group in which the beacon is placed. For instance, beacons installed in the 1st floor will have the same major value. The value can be anything between 1 and 65535.
Minor Value: It is the unsigned integer that differentiates a beacon from a group. The value falls between 1 and 65535.
Here is an example of a UUID:
f626db6-3ga2-4e98-8013-bc5b71f0983c
When you talk about a beacon, you think about a physical device. However, some smartphones can act as a transmitter as well as a receiver. For instance, Apple doesn’t offer any physical beacon. It has incorporated the beacon technology into iOS 7 operating system. With more than 200 million iOS 7 devices in the market, Apple already has a considerable amount of beacons in the market.
How are beacons useful?
Beacons don’t relay any important message. They simply relay their IDs. It is the job of the receiver device to apply this information into a useful solution. For instance, a retail mall installs beacons inside the mall. When a customer visits the store and browses the electronic section of the mall, the beacon installed at that place will transmit its ID. The app in the smartphone of the customer will receive the ID and identifies the location of the customer. In this case, the app identifies that the customer is at the electronics section. So, the app will send discounts and offers related to the electronic products of that mall. Moreover, these offers would be specific and customized for that customer.
Asset tracking with Beacons
Asset tracking and management is a key requirement for any industry. Beacons can significantly reduce the cost and complexity of this job. There are multiple ways to track assets using beacons. For instance, you can mount BLE receivers in a permanent fixture and tag assets to beacons. When an asset comes into proximity of a BLE-enabled receiver, it tracks the movement via mobile data or Wi-Fi and logs the data. You can either take action or store the information for management and analytics purposes. Using beacons, you can cost-effectively track thousands of assets in real-time, 24/7.
There are instances wherein you cannot mount BLE receivers in permanent fixtures in temporary locations such as conference halls or function halls. In such cases, you can fix beacons in different places and track assets using a mobile app. By tagging assets to beacons, you can track each asset from the mobile app. Implementation is easy as there is no need for wiring or costly installation.
For more accuracy and maximum coverage, you can augment the beacon setup with additional receivers. You can install fixed beacons and fixed BLE receivers and augment them with moving beacons and moving BLE receivers. This setup can be extremely useful in low-signal areas such as ICUs of a hospital or a high-security airport check points. In areas such as large construction sites, environments quickly change. As such, you need a dynamic beacon architecture. In such cases, you can complement beacons with GPS and Wi-Fi. Depending on your environment, business type and requirement, you can choose the right deployment beacon technology.
Asset tracking with beacons is quickly gaining traction. Reports show that beacons have significantly reduced operational costs of asset management tasks. According to a Proximity Directory report, a total of 15,176,500 proximity sensors were installed globally in Q2, 2017. And, asset tracking with beacons is saving billions of dollars for the $9.1 billion logistics industry. Similarly, the health industry can save hundreds and thousands of dollars with an ROI of 275% by using asset tracking with beacons.
The advantages of beacons are enormous. Using beacons, you can track every item in the warehouse, track vehicles within the infrastructure, track equipment and machinery in a healthcare location, track luggage trolleys in airports, railway stations etc. In addition, you can track people/employees by giving them BLE-enabled devices.
Bluetooth 5.0 is offering additional capabilities in the form of 2x speed, 800% more broadcast messaging capacity and 4x range. As such, beacons are sure to disrupt the RTLS solutions in the coming days.
Read More
Share
March 21, 2018
by
Ramu Kambalapuram
Blog
IoT with Private LTE Networks is disrupting the Industrial Vertical – Is your business ready for this innovation?
In Feb 2017, Qualcomm along with GE and Nokia announced a successful demonstration of private LTE for industrial IoT market which created a great buzz in the industrial IT circles. This team has conducted live field trails to continue the research based on this demonstration throughout 2017 by integrating their platforms and technologies. While Nokia provided the base infrastructure and the Nokia Digital Automation Cloud Service for a private network, Qualcomm offered the wireless connectivity with chipset devices and GE integrated these solutions onto its Industrial IoT platform Predix for a better control of industrial resources across the infrastructure. GE leverages the Predix platform with a private LTE network setup at GE headquarters. This demonstration brings private LTE networks into the limelight.
An Overview of LTE Networks
Long Term Evolution (LTE) is an innovative high-speed wireless network technology that comes with low latency and high speeds over long distances for data terminals and mobile devices via UMTS technologies. It was designed by 3
rd
Generation Partnership Program (3GPP) as a 4G network communications standard to offer higher speeds for wireless networks; ten times faster than 3G networks. With IP-based voice, data and multimedia streams, LTE networks offer speeds between 10 Mbit per second and 1 Gbit per second and is easy to deploy and use. They can be deployed on different frequency bandwidth blocks. The current LTE networks support 1.4MHz, 3MHz, 5MHz, 10 MHz, 15MHz, and 20MHz. every 5MHz spectrum of each cell support around 200 active connections.
How does it work?
LTE uses two different air interfaces for downlink and uplink purposes. For the downlink from the tower to the device, LTE uses Orthogonal Frequency Division Multiple Access (OFDMA) air interface which allows multiple connections on a single cell and increased throughput of a connection. Similarly, for the uplink from the device to the tower, LTE uses Discrete Fourier Transform Spread Orthogonal Frequency Division Multiple Access (DFTS – OFDMA) air interface. With varying air interfaces for downlink and uplink, LTE networks optimize connections with better battery life for the devices.
LTE for Industrial IoT
LTE technology is not new but it gained momentum with the advent of the Internet of Things (IoT). While the cloud computing revolutionized the IT world and centralized resources, it paved a way for BYOD networks wherein mobile devices entered the network. The next big step was Internet of Things wherein sensors and other industrial devices joined the IT networks. With IoT, organizations are able to facilitate communication between a range of devices including IT and non-IT devices.
The main challenge for Industrial IoT is connectivity issues. More often, industrial companies have their temporary facilities located in remote places wherein reliable network connection is not easy to obtain. Whether it is an oil excavation site, mining site or a power plant, the regular network might provide basic connectivity but not the required speed and efficacy. As industrial infrastructure is now equipped with robotics, automated guided vehicle (AGV), drones, Augmented reality and virtual reality (AR/VR), high-speed and low latency data transfer becomes a critical requirement. The data should be stored locally while having a global access. Services should be interoperable. This is where LTE networks come to the rescue. The temporary industrial sites can set up a standalone LTE network and enjoy reliable and faster network connectivity for that facility.
The state of LTE Networks
Today, every cellular mobile device supports 4G LTE network. While AT&T and Verizon launched 4G LTE networks, others are quickly following them. According to
ReportsandReports
, the global investments in LTE networks accounted for $800 million in 2016. This value is expected to grow at a CAGR of 32% between 2016 and 2020.
Persistence Market Research
envisages that the global LTE networks market value would reach $926.1 billion by 2024, growing at a CAGR of 13.1% between 2016 and 2024. Similarly,
Harbor Research
reports that the private LTE network would reach $17 billion by 2022.
Public LTE Vs Private LTE
Enterprises can either choose public or private LTE networks. When it comes to a public LTE offering, the network is managed by the service provider. While it gives wide-area coverage, it is also shared by other customers. Public LTE networks provide general voice and data services.
Private LTE networks bring additional benefits to the table. Firstly, private LTE networks come with dedicated equipment and are managed locally, giving better control over data. Moreover, there are no sudden traffic surges. With the consistent performance, industrial facilities can manage productivity at predictable levels. Secondly, private LTE networks are easy to deploy and use for dedicated as well as virtual resource-based infrastructure. Thirdly, private LTE networks offer dedicated service which means high-quality service is guaranteed along with the ability to customize the network to suit industrial-specific needs.
Benefits of Private LTE Networks
Support multiple devices with higher bandwidth
Customizable for features such as mobile settings and quality of service
Highly secure
Better control over data
Future proof as you can leverage the LTE roadmap
Superior coverage for indoors and outdoors
Seamless mobility
Interoperability between suppliers
Private LTE Networks take the Industrial IoT to a new horizon
As the IoT networks increased, the need for higher speed and coverage, full mobility, latency and quality of service became a critical requirement for industrial facilities such as airports, ports, container ports, warehouses etc. Qualcomm has partnered with GE and Nokia to create a unified communication network system. The result is the first Private LTE-based network for industrial IoT. By integrating all the devices in the network and bringing them onto an industrial OS Predix platform, organizations are now able to incorporate latest technologies such as machine learning, analytics, artificial intelligence and predictive maintenance to significantly improve the efficiency of business processes and services. Nokia takes the automation to a new level by offering a private plug n play LTE ecosystem. The wireless communication is managed by Qualcomm. Multefire is an LTE deployment initiated by Qualcomm and Nokia. It is now managed by Multefire Alliance that was formed in December 2015. Similarly, Federal Communications Commission (FCC) in the US has defined Citizen Broadband Radio Service (CBRS) that offers 150 MHz shared spectrum band in 5.5 GHz band. So, organizations have two solutions to cost-effectively own and manage their private LTE networks without purchasing spectrum licenses.
As private LTE networks bring low latency and high-speed wireless connectivity, industries can add more sensors, analytics and automation devices to efficiently manage business-critical procedures such as handheld computing, AGV, head mounted display, industrial robots, edge computing and analytics, interactive maintenance, environmental sensors, drone inspection, turbine and blade sensors etc..
Private LTE Use cases
Manufacturing Vertical
In manufacturing industries, welding robots are commonly used for welding and handling automobile parts on the assembly line. Synchronization between a robot and the assembly line sensor is critical for precision of a process. A small delay in communication will result in the collision between the robots that in turn collapses the entire assembly line processes. For this reason, many industries are running hard-wired connections that are expensive. Moreover, wired connections occupy more footprint and clog the area as well. With private LTE networks, organizations can operate with wireless robots and thereby save time, money and footprint.
Mining Vertical
In a mining location, people have to work in harsh and remote environments. While sophisticated and automated solutions are available, organizations cannot use them owing to the lack of proper communication systems for real-time data for remote vehicles, systems, and the monitoring center. With a private LTE network, organizations can replace regular vehicles with driverless vehicles so that they can quickly reach out to remote areas and precisely apply drill blast procedures. The mining operations can be efficiently monitored from a centralized dashboard.
Healthcare Vertical
Healthcare is one of the important verticals that hosts a large number of IoT devices ranging from scanners and X-Rays to clinical and biometric devices. However, healthcare organizations use Wi-Fi only because they are not able to choose one mobile service provider’s ratio for all devices. Obtaining FDA certification for all clinical devices is cumbersome. However, the CBRS LTE networks now allow organizations to choose a spectrum that is independent of a mobile service provider. Moreover, one FDA certification would work for any private LTE spectrum.
Image Source
Read More
Share
January 29, 2018
by
admin
Blog
Laravel project setup in AWS
Below are the steps to set up Laravel project in AWS instance.
Login to the AWS instance.
sudo yum update
sudo yum install httpd24 php56 php56-pdo php56-mbstring php56-mcrypt php56-mysqlnd
sudo curl -sS https://getcomposer.org/installer | php
sudo mv composer.phar /usr/local/bin/composer
sudo yum install git
cd /var/www/html
sudo git clone https://username@example.com/path/to/repository.git
Rename the cloned repository/project directory if required.
cd project-name
sudo vi .env
Change the MySQL connection details.
php artisan config:cache
cd /etc/httpd/conf
sudo vi httpd.conf
Insert below commands
<VirtualHost *:80>
ServerName www.example.com
DocumentRoot /var/www/html/project-name/public
<Directory /var/www/html/project-name/>
AllowOverride All
</Directory>
</VirtualHost>
sudo service httpd start
Read More
Share
January 19, 2018
by
Ramu Kambalapuram
Blog
How to import VM image to AWS
One of the coolest features I like about AWS is it not only gives you the powerful images through AMI but also allows you to import your VM images running in your data center as well. In this, I would like to show you how simple it is to import the VM image into the AWS
The prerequisites for VM import are
Configure the AWS CLI on the VM.A simple How-To guide can be found here in this link
https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html
S3 Bucket in the region you want to import the VM
IAM Role named VMimport
For S3 Bucket I am assuming name “my-vm-imports”
Creating IAM Role
You cannot create using the AWS management console. You have to follow the aws- only
create a trust policy trust-policy.json
{
"Version"
:
"2012-10-17"
,
"Statement"
: [

      {
"Effect"
:
"Allow"
,
"Principal"
: {
"Service"
:
"vmie.amazonaws.com"
},
"Action"
:
"sts:AssumeRole"
,
"Condition"
: {
"StringEquals"
:{
"sts:Externalid"
:
"vmimport"
}

         }

      }

   ]

}
2. Using aws command line create a role vmimport
aws iam
create
-
role
--role-name vmimport --assume-role-policy-document file://trust-policy.json
3. Create a file named role-policy.json with the following policy
{
"Version"
:
"2012-10-17"
,
"Statement"
: [

      {
"Effect"
:
"Allow"
,
"Action"
: [
"s3:ListBucket"
,
"s3:GetBucketLocation"
,
"s3:FullAccess"
],
"Resource"
: [
"arn:aws:s3:::my-vm-imports"
]

      },

      {
"Effect"
:
"Allow"
,
"Action"
: [
"s3:GetObject"
],
"Resource"
: [
"arn:aws:s3:::my-vm-imports/*"
]

      },

      {
"Effect"
:
"Allow"
,
"Action"
:[
"ec2:ModifySnapshotAttribute"
,
"ec2:CopySnapshot"
,
"ec2:RegisterImage"
,
"ec2:Describe*"
,
"ec2:FullAccess"
],
"Resource"
:
"*"
}

   ]

}
4. Use the following command “put-role-policy” to the role we created before.
aws
iam
put
-
role
-
policy
--
role
-
name
vmimport
--
policy
-
name
vmimport
--
policy
-
document
file://role
-
policy
.
json
Next steps :
Upload the VM image to S3
aws s3 cp file_path s3:
//my-vm-imports
2. Create a container file which contains the s3 bucket name, format, description and key name in the s3 bucket. Save this file as JSON
[

  {
"Description"
: “My VM
",

    "
Format
": "
ova
",

    "
UserBucket
": {

        "
S3Bucket
": “my-vm-imports"
,
"S3Key"
:
"my-vm-imports/myVm.ova"
}

}]
Note: Only OVA,VMDK image formats are supported in AWS
4. Finally, import the image from S3 with import-image command. After that, your image(AMI) will be ready for use
aws ec2
import
-image —description “Linux or Window VM” —-disk-containers file:
//container.json
Thanks for Reading.
Best Regards
CloudTern
Read More
Share
December 16, 2017
by
Ramu Kambalapuram
Blog
Getting started with Internet of Things (IoT)
Introduction
Internet of Things (IoT) has been the latest buzz in IT circles in recent times. This disruptive technology is bringing digital, analog and mechanical devices under a single umbrella to simplify infrastructure management. IoT secures business processes, improves operational efficiencies, optimizes costs and allows for better decision making.
According to
MarketsandMarkets
, the market value of IoT reached $157.57 billion in 2017. This value is expected to touch $561.04 billion by 2022, growing at a CAGR of 26.9%.
Junip
er
envisages that the total number of devices connected to the IoT networks would reach 42 billion by 2021. According to a
McKinsey
report, the IoT market that was valued at $900 million in 2015 is expected to touch $3.7 billion in 2020, growing at a CAGR of 32.6%.
An overview of Internet of Things
Internet of Things is a system or network of interconnected things, ranging from digital devices to mechanical devices and sensors, with an ability to transfer or exchange data without human or computer intervention. The transfer of data is done using unique identifiers. Simply put, IoT is a network of things. These things can be anything from an animal with a biochip, a human with a monitoring chip implant or a built-in sensor that monitors the temperature of a device.
In the tradition network setup, only computer devices were able to communicate with each other. With the advent of the IoT, computers, sensors and other mechanical devices are able to join any network and exchange data between them. Internet of Things is actually a combination of Microservices, wireless technologies and micro-electrical mechanical systems (MEMS). It was first mentioned by Kevin Ashton of MIT Auto-ID center in 1999. The advent of IoT has allowed people to analyze machine-generated data and better control business procedures.
How do IoT Systems work?
The IoT system comprises multiple devices or sensors, each assigned with a unique identifier. For instance, a logistics company runs a fleet of vehicles with a GPS system, a power plant uses a sensor to monitor the temperature of a boiler, a biochip implanted to an animal to check its temperature etc. The data collected from a device/sensor is automatically uploaded to the cloud or to a central location using a variety of communication protocols such as LAN, WAN, Wireless, cellular network, low-energy Bluetooth, NFC, RFID, ZigBee, Z-Wave etc.
The data that is stored in the cloud is processed using an analytics software. Based on the threshold values set by the user, the software monitors the data and automatically performs specified actions. For instance, if the boiler temperature is set to a threshold value and if it reaches that value, the software automatically turns off the boiler to avoid blasting. At the same time, it sends an alert notification to the concerned people. Using a centralized dashboard, you can remotely monitor and manage the IoT infrastructure with ease.
How do devices in an IoT network speak to each other?
When you send data from one device to another, the data is broken into smaller packets that travel through various routes to reach the destination. Once the data reaches the destination, the pieces of data are reassembled. An Internet Protocol is used for this messaging system. There are two types of internet protocols; Transmission Control Protocol (TCP) and User Datagram Protocol (UDP). While UDP is quick and efficient, it doesn’t verify the receipt of the data. TCP actually checks if the data has arrived.
When it comes to the Internet of Things, there are multiple devices that vary in hardware, software, connectivity, application and messaging protocols. So, communication methods differ with each IoT system.
Common Communication Protocols for IoT systems
IoT Device to IoT Device
When you want an IoT device to communicate with another IoT device, Data Distribution Service (DDS) is a good option. It is a middleware protocol that uses the publish-subscribe model to receive and send data. DDS protocol eliminates complex network programming in distributed applications and offers highly scalable and reliable data connectivity. With message-centric middleware, developers have to write code for sending messages. However, data-centric middleware is aware of the data it stores. DDS is data-centric which
means it is best suited IoT networks, offering better control over data management. With a rich set of Quality of Service (QoS), DDS enables you to control how data is stored and distributed which makes it a better choice for industrial IoT as well as consumer IoT.
IoT Device to the Cloud
When you want to collect data from multiple IoT devices in a large network and send this data to the cloud for analysis, you need a system that can efficiently ingest massive amounts of data. For instance, a large shopping mall contains multiple HVAC devices. Each HVAC device reports metrics such as temperature, humidity, load, energy consumption, air quality and desired temperature etc., generating gigabytes of data in few seconds. To process, store, analyze and manage these massive datasets, you need a powerful messaging system. Apache Kafka is the answer.
Apache Kafka
Sensor devices cannot run the full stack of TCP protocols. So, they use an IoT gateway such as Zigbee or Z-Wave to aggregate datasets and route them to the corresponding data points. Apache Kafka clusters receive these datasets and send them to corresponding data points, for instance, metrics such as temperate and humidity needs real-time monitoring. So, they are sent to real-time processing solutions such as Apache Spark or Apache Storm. Similarly, metrics such as energy consumption and load are collected over time and analyzed using Hadoop data analytics systems. Apache Kafka acts as a publish-subscribe messaging system wherein massive amounts of datasets are ingested into the system.
MQTT
When you use multiple client apps that exchange real-time messages on various topics, Message Query Telemetry Transport (MQTT) is a good choice. Invented by Dr. Andy Stanford of IBM, MQTT is a lightweight protocol that uses the publish-subscribe messaging system. Working on top of the TCP/IP protocol, MQTT facilitates data communication even in low bandwidth networks. It uses the TCP/IP port 1883. Being a lightweight protocol, it allows devices with small code footprint to remotely send data to the cloud. MQTT is best suited for mobile devices wherein low power usage, small footprint and minimized data packets are involved.
CoAP
When you have resource-constrained devices such as wireless sensors nodes in the IoT network, Constrained Application Protocol (CoAP) is a good choice. This service-layer protocol enables constrained nodes to easily communicate with the regular nodes on the Internet. It can be easily integrated with the web as it easily translates to HTTP. CoAP is also used for sending SMS by communication networks.
RESTful API
As multiple devices are connected to an IoT network, developers should be able to access specific devices without knowing their protocols or intricacies. REST APIs enable you to expose them as interfaces so that you can write code for devices as you normally do for backend systems. RESTful APIs are best suited for IoT systems as they allow any device that can use HTTP to make its state available and standardize a way to manage data. So, developers can write a code wherein you check the state of a light bulb and turn it on/off. REST uses a unified architectural style which means a single app can use the same software written in different programming languages. With RESTful APIs, developers can focus on the application interactions instead on the applications themselves.
A common IoT platform is the need of the hour
As there are multiple devices involved in IoT networks, it is not easy to come up with a common protocol for device communication. There are two groups that are trying to create a common communication platform for IoT devices. The first one is Allseen Alliance that is backed by companies such as Qualcomm and Cisco. The second one is Open Interconnect Consortium that is backed by companies such as Intel and Samsung Electronics. Allseen Alliance released a software framework platform called the Alljoyn IoT platform recently. OIC came up with another framework platform called IoTivity. Looking at these efforts to implement standards in the IoT network, we can expect complete operability within the IoT in the days to come.
Read More
Share
November 14, 2017
by
Ramu Kambalapuram
Blog
Hybrid Cloud Architecture with CISCO CSR 1000v
Cisco CSR 1000v series is a router software appliance from Cisco. It provides enterprise routing, VPN, Firewall, IP SLA, and more.CSR 1000v can be used to connect multiple VPC across all-region in AWS Cloud and on-premise networks. Thus it can be used avoid managed VPN service from AWS.
In AWS, you can find Cisco CSR 1000v in AWS marketplace which has 30 days free trial to test it out.
AWS Marketplace for Cisco
. Be aware this is not cheap, it will cost you EC2 Instance charges. All instance types are not supported for CSR 1000v. It supports only m3 and c3 instance family types.
Cisco CSR 1000v Can be used in various network models in cloud like Transit VPC, multi-cloud Network.
Following is the Architecture I have used to connect multiple VPC.
The two VPC’s are one in N.Virginia region and other is in Ohio Region. And Each VPC has Internet Gateway and were connected over VPN. On Ohio region, we used AWS managed VPN service to connect VPC in N.Virginia region VPC. And On-Premise Edge Router we used Cisco RV110W small business router. In this Post, I would like to mention the steps to follow to establish VPN over two VPC’s spread in two different regions in AWS.
Steps to create VPC’s in two regions:
Create VPC in N.Virginia Region with CIDR 10.0.0.0/16 and attach Internet Gateway to it. you can do it from CLI or through the management console.
aws ec2
create
-vpc
--cidr-block 10.0.0.0/16 --region us-east-1
Output
:
{
"Vpc"
: {
"VpcId"
:
"vpc-848344fd"
,
"InstanceTenancy"
:
"dedicated"
,
"Tags"
: [],
"CidrBlockAssociations"
: [
                    {
"AssociationId"
:
"vpc-cidr-assoc-8c4fb8e7"
,
"CidrBlock"
:
"10.0.0.0/16"
,
"CidrBlockState"
: {
"State"
:
"associated"
}
                    }
                ],
"Ipv6CidrBlockAssociationSet"
: [],
"State"
:
"pending"
,
"DhcpOptionsId"
:
"dopt-38f7a057"
,
"CidrBlock"
:
"10.0.0.0/16"
,
"IsDefault"
:
false
}
          }


aws ec2
create
-internet-gateway
--region us-east-1
Output
:

          {
"InternetGateway"
: {
"Tags"
: [],
"InternetGatewayId"
:
"igw-c0a643a9"
,
"Attachments"
: []
              }
          }



aws ec2 attach-internet-gateway
--gateway-id <<IGW-ID>> --vpc-id <<VPC-ID>> --region us-east-1
Create two subnets in N.Virginia Region VPC, one for CSR 1000v with CIDR 10.0.0.0/24 and another subnet with CIDR 10.0.1.0/24.
aws ec2
create
-subnet
--cidr-block 10.0.0.0/24 --vpc-id <<VPC-ID>> --region us-east-1
Output
:
{
"Subnet"
: {
"VpcId"
:
"vpc-a01106c2"
,
"AvailableIpAddressCount"
:
251
,
"MapPublicIpOnLaunch"
:
false
,
"DefaultForAz"
:
false
,
"Ipv6CidrBlockAssociationSet"
: [],
"State"
:
"pending"
,
"AvailabilityZone"
:
"us-east-1a"
,
"SubnetId"
:
"subnet-2c2de375"
,
"CidrBlock"
:
"10.0.0.0/24"
,
"AssignIpv6AddressOnCreation"
:
false
}
          }

aws ec2
create
-subnet
--cidr-block 10.0.1.0/24 --vpc-id <<VPC-ID>> --region us-east-1
Output
:
{
"Subnet"
: {
"VpcId"
:
"vpc-a01106c2"
,
"AvailableIpAddressCount"
:
251
,
"MapPublicIpOnLaunch"
:
false
,
"DefaultForAz"
:
false
,
"Ipv6CidrBlockAssociationSet"
: [],
"State"
:
"pending"
,
"AvailabilityZone"
:
"us-east-1b"
,
"SubnetId"
:
"subnet-2c2de375"
,
"CidrBlock"
:
"10.0.1.0/24"
,
"AssignIpv6AddressOnCreation"
:
false
}
          }
Create Route Table in N.Virginia VPC which will have the default route to Internet Gateway.And associate CSR subnet to it.
4. Launch the CSR 1000v from AWS MarketPlace with the one-click launch.
Link To AWS Marketplace
, you can ssh into the CSR 1000v instance using
ec2-user
.Attach Elastic IP to the CSR instance which will act as Customer Gateway in N.Virginia Region VPC. In later steps, we will configure the router to add Static routes to other subnets in VPC and setting BGP to propagate routes over VPN Connection with other VPC.
5. In a similar fashion create VPC in AWS Ohio region with CIDR 10.1.0.0/16 And create two subnets with CIDR 10.1.0.0/24 and 10.1.1.0/24
Steps to Create VPN connection in AWS Ohio VPC
Create Customer Gateway. Open VPC management console at
console.aws.amazon.com
. In navigation pane choose Customer Gateway and then create new Customer Gateway. Enter Name, Routing type as Dynamic and EIP of the CSR 1000v instance in N.Viriginia Region VPC. ASN number is 16-bit and must be in the range of 64512 to 65534.
Create VPG and attach to the VPC.In the Navigation Pane choose Virtual Private Gateway and create VPG.
Now Create VPN connection. In Navigation Pane Choose VPN Connection, Create New VPN Connection. Enter the Name, VPG and Customer Gateway which we have created previously, select routing type as Dynamic and create VPN connection.
It will take few minutes to create VPN connection. When it is ready to download the configuration for Cisco CSR from the drop-down menu.
Steps to establish VPN Connection on CSR 1000v
Add static routes of other subnets in VPC(N.Virginia) to CSR 1000v. Every subnet in AWS has a virtual router with IP address of Subnet CIDR +1. As CSR router will be in Subnet 10.0.0.0/24  the virtual router IP address will be 10.0.0.1. The Virtual Router on each subnet has a route to other all subnets in the VPC.
>Configure terminal
#ip route 10.0.1.0 255.255.255.0 10.0.0.1
Configure BGP. Choose the ASN number which you gave while creating Customer Gateway in Ohio VPC. Above we gave 64512
> Configure terminal
(config)
#router bgp 64512
(Config-router)
# timers bgp keepalive holdtime
(Config-router)
# bgp log-neighbor-changes
(Config-router)
# end
This step might not be necessary. But as good practice, I have applied the above configuration before copying the configuration file that is downloaded before.
Apply the Configurations that are downloaded previously when VPN Connections Created. After you have applied those setting on CSR you can see on the management console that both the tunnels of VPN as UP.
Testing to check connectivity between two VPC’s
Launch an instance in subnet1 in Ohio region VPC’s with Public IPv4. SSH into the instance and ping the CSR 1000v instance private IP.
Similarly, you can check connectivity with Ohio Region VPC by pinging the instance in subnet1 in Ohio region VPC with its Private IP.
Troubleshooting
:
> Route Propagation must be added to the route table in Ohio Region VPC.
> You must configure CSR 1000v as NAT, so the subnets in N.Virginia region can access the hosts in Ohio region VPC via CSR 1000v. You need to Update the route table with target fo CSR 1000v instance-id after making it as NAT.
> Allow ICMP in Security groups on all instances.
Thanks and Regards
Naveen
AWS Solution Architect @CloudTern
Read More
Share
November 2, 2017
by
Ramu Kambalapuram
Blog
VPC Design Principles
Virtual Private Cloud(VPC) creation is the first step in building your infrastructure in AWS Cloud. AWS gave the flexibility to create VPC based on
RFC4632
. Major Components of VPC :
VPC CIDR
,
Subnets
,
Route Table
,
ACL
and Security Groups. The VPC creation is a straightforward method just grab a CIDR based on
RFC4632
but subnetting the VPC can consider the  following principles.
Creation of Subnets:
Primary reasons to create Subnets
You need hosts to be routed successfully.(Private facing or Public facing)
Want to distribute Workload across multiple AZ’s( Availability Zones) for fault tolerance.
Create Subnets for hosts that require additional layer of  Security using ACL ( Access Control List)
Subnet the network into smaller networks which can be considered as  Public Subnets, Private or VPN only subnets. These networks are supernets and not the actual subnets we create. Then subnet each supernet into smaller networks which you fit your hosts into it.
Note* : AWS reserves 5 IPs when you create a subnets. So more subnets you create more ips you will lose. For example for subnet 10.0.0.0/27 following IP’s are resolved
10.0.0.0 network address
10.0.0.1 Virtual Router address
10.0.0.2 DNS address
10.0.0.3 Reserved by AWS for future use.
10.0.0.31 Broadcast address
Route Tables
All the hosts within VPC can be routed to other hosts in the VPC using an implicit virtual router . A Default Virtual Router would be created when you create the subnet. For example a subnet with CIDR 10.0.0.0/27 will have Virtual Router with IP 10.0.0.1 ( Subnet CIDR + 1). This Router will utilize the route table entries of the subnet associated with.
Each Subnet should be associated with a Route Table for traffic to flow.If a subnet is not associated to any route table, it will use the default Main Route Table. Route Table can be associated with multiple subnets.
Create Route Tables for Subnets that need different Routing requirements(Public facing or Private facing).
Create Route Table for subnets that require more specific routing. For example a subnet may be needed to allow traffic only from a pool of IP address.
Access Control List(ACL)
ACL Provide security at Subnet Level. You can control what traffic to flow in and out of a subnet. ACL are stateful, i.e you have to define both ingress and outgress traffic in the rule list.
You can find more at
ACL Overview
Create ACL if you want restrict any traffic to flow to the hosts in the subnets.
Network Address Translator (NAT)
A NAT is used to provide Outbound internet to the hosts inside Private Subnets. Route Tables for Private Subnets has to updated with logical id of NAT to provide Outbound Internet Connectivity to hosts inside private Subnet.
Based on the above principles ,a Concrete Example for  Creating VPC in Practice is below
Subnet the VPC CIDR to Public facing or Private facing Subnets.
All Private facing subnets would be associated with a single Route Table, and  ACL. The same would be applied for VPN Subnets and Public Subnets with different Route Tables and ACL
Create a Subnet if more security is needed at subnet level using ACL and associate the subnet to Route Table.
The following figure shows the summary of VPC Design in AWS
Read More
Share
September 29, 2017
by
admin
Blog
Cloud-Init Cheat Sheet
Cloud-init is a multi-distribution package that handles early initialization of cloud instances. Some of the things cloud-init can do are
set up the hostname.
setting up a local user.
Updating and installing the packages on Linux.
Disk setup and mounting the additional volumes.
More information can be found at
Cloud-Init
Today most of the distribution support cloud-init and using cloud-init can run all cloud providers(AWS, Azure, GCP). In this article, I want to show some of the code-snippets I have tried in AWS with different distributions mainly Ubuntu and Amazon Linux.
#To create hostname :
#cloud-config
#set the hostmachine name
fqdn: myhostname.com
This will set the hostname of the deployed instance to myhostname.com. But the default AMI from Amazon Linux does not support changing the hostname. You need to launch the instance and change the preserve_hostname to false in etc/cloud/cloud.cfg.Then you need to build an image from that instance and launch a new instance from the build image with the above cloud-config script to change the hostname.
#To add additional users to the instance
#cloud-config
users:
 - name: bob
   sudo: ALL=(ALL) NOPASSWD: ALL
   groups: admin, root
This will add user bob to the instance along with the default user created by distro’s like for Amazon Linux default user ec2-user and for Ubuntu default user is ubuntu.
#To update packages and install new ones:
#cloud-config
package_update:
true
packages:
 - pwgen
 - nginx
The above will update the distro package system and install the pwgen and nginx packages.
#Disk Setup and mount the additional EBS volumes.
#cloud-config
# - /dev can ommited for device names starting with xvd, sd, hd, vd
# if device does not exist at the time, an entry will still be written to /etc/fstab
mounts:
- [xvdb, /data,
"auto"
,
"defaults,nofail"
,
"0"
,
"0"
]
#setup the file system on the device
fs_setup:
 - label: data
   filesystem:
'ext4'
device:
'/dev/xvdb'
partition: auto
runcmd:
 - mkdir /data
This will basically set up the disk to filesystem ext4 and add the mounting device to /etc/fstab in Linux.
Thanks for viewing.
Best Regards
Naveen
Read More
Share
September 20, 2017
by
Ramu Kambalapuram
Blog
Custom AMI with Custom hostname
I am using Amazon web services for a while now. And using it allowed me to have hands dirty on various services. In AWS AMI’s(Amazon Machine Image) provides the information like operating system, application server, and applications to launch into the virtual server(or can be called as an instance) in the cloud. There are lots of options for selecting AMIs provided by AWS or by the community. You can choose the preferred AMI that can meet your requirements. You can customize the instance that you have launched from the AMIs provided by AWS and can create your own AMI from that.All the AMIs created by you are private by default.
Interestingly the instances launched with Public AMIs in AWS comes with default user-name and no password authenticated which sometimes I don’t like. For example, Instances launched with Amazon Linux will have default user-name
ec2-user
and for Ubuntu instance default user-name is
Ubuntu
.
Instance launched with Public AMIs also does not allow you change the hostname on flight using user-data. Hostname for any instance launched with Public AMI looks something like
ip-
<
Private-IPv4
>
Example: ip-172-1-20-201
So I have decided to create an AMI which will have default user as Naveen and password as *****. And I would like to have my instance named as myhostname.com i.e hostname. I will use a cloud config script to do that.
cloud-init is a multi-distribution package that handles early initialization of cloud instances.More information can be found at
Cloud-Init
. Some of the tasks performed by cloud-init are
Set hostname
Set the default Locale (default user)
Generate host private ssh keys
Parse and handle user-data
Custom AMI
For creating my Custom AMI with above-mentioned changes I have followed the below steps:
1. I have launched a t2.micro instance with Amazon Linux AMI ‘ami-4fffc834’. You can launch the instance using AWS management console or be using AWS command line(aws-cli). I have used the aws-cli to launch the instance.
aws
ec2
run
-
instances
--
image
-
id
ami
-
4fffc834
--
count
1
--
instance
-
type
t2
.
micro
--
key
-
name
Naveen
The above command will launch one t2.micro instance with the key name ‘Naveen’.
2.  As I have launched the instance using Amazon Linux, the default user-name is ec2-user. Amazon Linux does setting default user using cloud-init. The configuration file for setting default user can be found in /etc/cloud/cloud.cfg.d/00_default.cfg. The config file looks something like below
system_info:
# This will affect which distro class gets used
distro: amazon
distro_short: amzn
# Default user name + that default users groups (if added/used)
default_user:
name: ec2-user
lock_passwd: true
gecos: EC2 Default User
groups: [ wheel ]
sudo: [ "ALL=(ALL) NOPASSWD:ALL" ]
shell: /bin/bash
# Other config here will be given to the distro class and/or path classes
paths:
cloud_dir: /var/lib/cloud/
templates_dir: /etc/cloud/templates/
upstart_dir: /etc/init/
package_mirrors:
- arches: [ i386, x86_64 ]
search:
regional:
- repo.%(ec2_region)s.%(services_domain)s
- repo.%(ec2_region)s.amazonaws.com
ssh_svcname: sshd
The 00_default.cfg contains other things as well but I have posted only the one which needed to be changed. As we can see the default username for this distro is ec2-user. lock_passwd: true means the user who is trying to log in with the username ec2-user is not allowed to authenticate using a password.
3. I have changed the user-name to Naveen and lock_passwd: false in the config file. But this config file does not allow entering the normal password as part of the config file. You need to give the password for the user in the hash. So to do that I have used the following commands in Ubuntu machine
# mkpasswd comes with whois package
sudo ap-
get
install whois
#To Generate hash using mkpasswd
mkpasswd –method=SHA-512
#This will prompt to enter password
#After entering password, mkpasswd will generate hash and output on console
Ex:
$6$G0Vu5qLWx4cZSHBx$0VYLSoIQxpLKVhlU
.oBJdVSW7Ellswerdf.r/ZqWRuijiyTjPAXJzeGwYe1D/f94tt/tf
Copy the above-generated hash and add it to ‘passwd’ key in the above config file. After making final changes in the config file
system_info:
# This will affect which distro class gets used
distro:
amazon
distro_short:
amzn
# Default user name + that default users groups (if added/used)
default_user:
name:
Naveen
lock_passwd:
false
passwd:
$6$G0Vu5qLWx4cZSHBx$0VYLSoIQxpLKVhlU.oBJdVSW7Elwerfwq.r/ZqWRuijiyTjPAXJzeGwYe1D/f94tt/tf1lXQYJtMtQLpvAqE1
gecos:
Modified Default User name
groups:
[ wheel ]
sudo:
[
“ALL=(ALL:ALL) ALL”
]
shell:
/bin/bash
# Other config here will be given to the distro class and/or path classes
paths:
cloud_dir:
/var/lib/cloud/
templates_dir:
/etc/cloud/templates/
upstart_dir:
/etc/init/
package_mirrors:
–
arches:
[ i386, x86_64 ]
search:
regional:
– repo.
%(ec2_region)
s.
%(services_domain)
s           – repo.
%(ec2_region)
s.amazonaws.com
ssh_svcname:
sshd
4. Finally, i have made the following changes in rc.local which will change the behavior of ssh service to accept password authentication. And change the preserve_hostname to false in /etc/cloud.cfg
if
grep -Fxq
“PasswordAuthentication no”
/etc/ssh/sshd_config
then
sed -i
‘s/^PasswordAuthentication.*/PasswordAuthentication yes/’
/etc/ssh/sshd_config  /etc/init.d/sshd restart
fi
With these changes above I have achieved adding default user-name with Naveen and with the default password. With changes above to the instance above I have created an AMI from the instance using aws-cli
aws
ec2
create
-
image
--
instance
-
id
i
-
09ebf4e320b0cadca
--
name
"ONE_AMI"

Output:
{
"ImageId"
:
"ami-ebec0c91"
}
#Cloud-config for setting hostname
With the Customized i can launch the instance with user-name Naveen but still, the hostname will be in the format like IP-<Private-IPv4>. So  I have used the below cloud-config script to change the hostname.
#cloud-config
#set the hostmachine name
fqdn: myhostname.com
#Add additional users for the machine
users:
 - name: sysadmin
   groups: [root,wheel]
   passwd:
$6$G0Vu5qLWx4cZSHBx$0VYLSoIQxpLKVhlU
.oBJdVSW7EllsvFybq.r/ZqWRuijiyTjPAXJzeGwYe1D/f94tt/tf1lXQYJtMtQLpvAqE1
   sudo: ALL=(ALL:ALL) ALL
#Final Message
final_message:
"The system is finally up xcvxxxxxxxxxxxccccccccccccccccccccccc, after
$UPTIME
seconds"
The above script will create the instance with hostname myhostname.com and create a user sysadmin. The above script will be passed as part of user-data when launching an instance
aws
ec2
run
-
instance
--
image
-
id
ami
-
4240a138
--
count
1
--
intance
-
type
t2
.
micro
--
user
-
data
file://cloud
.
cfg
The above launch an instance without Key pair which means I can only log into the instance using the default user Naveen or using a username we have created in cloud configuration script that was passed a user-data.
Finally with this i have the instance with my custom default user-name and password, and a hostname with myhostname.com.
Read More
Share
6
7
8
9
10
11
CloudTern offers highly scalable software solutions that enable organizations to securely drive innovation into business processes
Contacts
+1 (945) 216-6923
info@cloudtern.com
8105 Rasor Blvd Ste 236
Plano, TX – 75024
Linkedin-in
Twitter
Instagram
Services
Quick Links
© 2025 — CloudTern. All Rights Reserved.